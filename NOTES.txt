# an FYI on passing JSON credentials to the CLI
L='{"Host": "localhost", "Port": 5432, "User": "hippa_wr", "Pass": "THEPASS", "DBName": "hipparchiaDB"}'
./target/debug/hipparchia_rust_dbhelper --sv --p ${L}


// http://lise-henry.github.io/articles/optimising_strings.html
// not really going to help with our pain points?


 ./target/debug/hipparchia_rust_dbhelper --sv --l 3 --p ${L} --svdb lt0474 --svs 4 --sve 100

 Hipparchia Rust Helper CLI Debugging Interface (v.0.0.4)
 [HRH] requested the vector_prep() branch of the code
 [HRH] Seeking to build winnertakesall bags of words
 97
 [HRH] unified text block built [B: 41ms 544us 994ns]
 [HRH] preliminary cleanups complete [C: 43ms 417us 369ns]
 [HRH] found 45 sentences [D: 173ms 99us 811ns]
 [HRH] found 486 words [E: 174ms 624us 929ns]
 l: 486; g: 0

1431 •erik@big-sur-box• rust/HipparchiaRustDBHelper/ % ./target/debug/hipparchia_rust_dbhelper --sv --l 3 --p ${L} --svdb lt0474 --svs 4 --sve 10000
Hipparchia Rust Helper CLI Debugging Interface (v.0.0.4)
[HRH] requested the vector_prep() branch of the code
[HRH] Seeking to build winnertakesall bags of words
9997
[HRH] unified text block built [B: 258ms 83us 739ns]
[HRH] preliminary cleanups complete [C: 334ms 977us 666ns]
[HRH] found 5163 sentences [D: 15s 402ms 544us 954ns]
[HRH] found 14316 words [E: 15s 512ms 177us 730ns]

sv_buildsentences() is where we are losing all of the time...

[moved the regex compilation out of sv_stripper()]

1434 •erik@big-sur-box• rust/HipparchiaRustDBHelper/ % ./target/debug/hipparchia_rust_dbhelper --sv --l 3 --p ${L} --svdb lt0474 --svs 4 --sve 10000
Hipparchia Rust Helper CLI Debugging Interface (v.0.0.4)
[HRH] requested the vector_prep() branch of the code
[HRH] Seeking to build winnertakesall bags of words
9997
[HRH] unified text block built [B: 243ms 172us 463ns]
[HRH] preliminary cleanups complete [C: 320ms 110us 531ns]
[HRH] found 5163 sentences [D: 3s 771ms 731us 181ns]
[HRH] found 14316 words [E: 3s 881ms 882us 753ns]
l: 14315; g: 1

[this still seems too slow; but going straight to Vec<String> instead of HashMap<String, String> sv_buildsentences saved no time]

bypass sv_stripper & use lazy_static!:

1439 •erik@big-sur-box• rust/HipparchiaRustDBHelper/ % ./target/debug/hipparchia_rust_dbhelper --sv --l 3 --p ${L} --svdb lt0474 --svs 4 --sve 10000
Hipparchia Rust Helper CLI Debugging Interface (v.0.0.4)
[HRH] requested the vector_prep() branch of the code
[HRH] Seeking to build winnertakesall bags of words
9997
[HRH] unified text block built [B: 241ms 671us 836ns]
[HRH] preliminary cleanups complete [C: 319ms 192us 588ns]
[HRH] found 5163 sentences [D: 856ms 497us 558ns]
[HRH] found 14876 words [E: 972ms 961us 481ns]
l: 14875; g: 1


RUST vs GO:

1217 •erik@big-sur-box• e-gun/HipparchiaGoDBHelper/ % date && ./HipparchiaGoDBHelper -sv -l 5 -svdb lt0474 -svs 4 -sve 100000 -k "" -p ${L} && date
Fri Jun  4 17:16:33 EDT 2021
[HGH] Hipparchia Golang Helper CLI Debugging Interface (v.1.0.7) [loglevel=5]
[HGH] Bagger Module Launched
[HGH] Seeking to build *winnertakesall* bags of words
[HGH] Connected to redis
[HGH] Connected to hipparchiaDB on PostgreSQL
[HGH] No redis key; gathering lines with a direct CLI PostgreSQL query%!(EXTRA string=hipparchiaDB)
[HGH] unified text block built [B: 0.218878s])
[HGH] preliminary cleanups complete [C: 0.264607s])
[HGH] found 51491 sentences [D: 0.978179s]
[HGH] found 65645 distinct words [E: 1.025116s]
[HGH] Got morphology [F: 2.549166s]
[HGH] Build morphdict [F1: 5.214109s]
[HGH] Pre-Bagging [F2: 5.246322s]
[HGH] Post-Bagging [F3: 5.570288s]
[HGH] Cleared stopwords [F4: 5.664482s]
[HGH] Reached result @ 7.092705s]
bags have been stored at _vectorresults
Fri Jun  4 17:16:40 EDT 2021

% ./target/release/hipparchia_rust_dbhelper  --sv --l 3 --p ${L} --svdb lt0474 --svs 4 --sve 100000
  Hipparchia Rust Helper CLI Debugging Interface (v.0.0.4)
  [HRH] requested the vector_prep() branch of the code
  [HRH] Seeking to build winnertakesall bags of words
  [HRH] No redis key; gathering lines with a direct CLI PostgreSQL query)
  [HRH] dblines fetched [A: 351ms 497us 55ns]
  [HRH] unified text block built [B: 392ms 610us 712ns]
  [HRH] preliminary cleanups complete [C: 416ms 774us 487ns]
  [HRH] found 44447 sentences [D: 643ms 367us 938ns]
  [HRH] found 64971 words [E: 721ms 293us 431ns]
  [HRH] found 54464 morphology objects [F: 6s 594ms 658us 949ns]
  [HRH] Built morphmap [G: 29s 157ms 980us 115ns]
  [HRH] Built 44447 bags [H: 30s 999ms 807us 997ns]
  [HRH] Purged stopwords in 35208 bags [I: 31s 59ms 901us 493ns]
  [HRH] Stored 35208 bags [J: 31s 998ms 776us 682ns]

the slowdown is effectively postgres + regex:
    "found 54464 morphology objects" should be just a single tt + query + get/load
    "Built morphmap" is sending regexp into a loop 54464 times....

sentences broken up by things like the Q in "Eloquentia Q. Hortensi ne me in dicendo impediat, non..."
so should implement the deabbreviator to fix that...

===

builder 1.5.0b lets you skip the regex and look what happens: 10x faster + pipelined redis gets us to where we want to be...

1028 •erik@big-sur-box• rust/HipparchiaRustDBHelper/ % ./target/release/HipparchiaRustDBHelper  --sv --l 3 --p ${L} --svdb lt0474 --svs 4 --sve 149570
Hipparchia Rust Helper CLI Debugging Interface (v.0.1.3)
[HRH] requested the vector_prep() branch of the code
[HRH] Seeking to build winnertakesall bags of words
[HRH] No redis key; gathering lines with a direct CLI PostgreSQL query)
[HRH] 149567 dblines fetched [A: 361ms 203us 710ns]
[HRH] unified text block built [B: 420ms 570us 802ns]
[HRH] preliminary cleanups complete [C: 542ms 121us 187ns]
[HRH] found 67980 sentences [D: 803ms 534us 341ns]
[HRH] found 81507 words [E: 950ms 600us 645ns]
[HRH] found 83320 morphology objects [F: 1s 789ms 505us 967ns]
[HRH] Built morphmap for 81663 items [G: 1s 851ms 859us 940ns]
[HRH] Built 67980 bags [H: 2s 559ms 985us 645ns]
[HRH] Purged stopwords in 67389 bags [I: 2s 775ms 940us 253ns]
[HRH] Stored 67389 bags [J: 2s 924ms 4us 31ns]
rusttest_vectorresults

===


the great sentences mystery [--sve 149570]

python's cicero:

!!! acquireandbagthewords(): 75129 sentences found !!!


golang's cicero:

[HGH] [D: 1.537s][Δ: 1.017s] Inserted 72930 sentences into 72930 bags


rust's cicero:

[HRH] found 67980 sentences [D: 646ms 880us 781ns]


====

the regex code that will slow you to a crawl...


fn sv_getpossiblemorph(ob: String, po: String, re: Regex) -> MorphPossibility {
    //     let pf = "(<possibility_([0-9]{1,2})>)(.*?)<xref_value>(.*?)</xref_value><xref_kind>(.*?)</xref_kind>(.*?)</possibility_[0-9]{1,2}>";
    //     let re = Regex::new(pf).unwrap();
    //
    //     let p = "<possibility_2>bellī, bellus<xref_value>8636495</xref_value><xref_kind>9</xref_kind><transl>A. pretty; B. every thing beautiful; A. Gallant; B. good</transl><analysis>masc nom/voc pl</analysis></possibility_2>";
    //
    //     let c = re.captures(p).unwrap();
    //
    //     for i in 0..7 {
    //         let t = c.get(i).map_or("", |m| m.as_str());
    //         println!("{}: {}", i, t);
    //     }
    // 0: <possibility_2>bellī, bellus<xref_value>8636495</xref_value><xref_kind>9</xref_kind><transl>A. pretty; B. every thing beautiful; A. Gallant; B. good</transl><analysis>masc nom/voc pl</analysis></possibility_2>
    // 1: <possibility_2>
    // 2: 2
    // 3: bellī, bellus
    // 4: 8636495
    // 5: 9
    // 6: <transl>A. pretty; B. every thing beautiful; A. Gallant; B. good</transl><analysis>masc nom/voc pl</analysis>

    let c = re.captures(po.as_str());
    match c {
        Some(v) => {
            let n = v.get(2).map_or("", |m| m.as_str());
            let e = v.get(3).map_or("", |m| m.as_str());
            let x = v.get(4).map_or("", |m| m.as_str());
            let a = v.get(6).map_or("", |m| m.as_str());

            // note that in [3] you need to take the second half after the comma: "bellus" and not "bellī, bellus"
            let mut ee: Vec<&str> = e.split(",").collect();
            let e = ee.pop().unwrap_or("").trim();

            let mp: MorphPossibility = MorphPossibility {
                obs: ob,
                num: n.to_string(),
                ent: e.to_string(),
                xrf: x.to_string(),
                ana: a.to_string(),
            };
            return mp
        }
        None => {
            let mp: MorphPossibility = MorphPossibility {
                obs: ob,
                num: "".to_string(),
                ent: "".to_string(),
                xrf: "".to_string(),
                ana: "".to_string(),
            };
            return mp
        }
    }
}

fn sv_updatesetofpossibilities(rpo: String, re: Regex) -> HashMap<String, bool> {
    // a new collection of possibilities has arrived <p1>xxx</p1><p2>yyy</p2>...
    // parse this string for a list of possibilities; then add its elements to the set of known possibilities
    // return the updated set
    let mut morph: HashMap<String, bool> = HashMap::new();
    for f in re.find_iter(rpo.as_str()) {
        morph.insert(String::from(f.as_str()), true);
    }
    morph
}
